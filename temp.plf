;; unsat
(check
 ;; Declarations
(% v0 var_bv
(% v1 var_bv
(% A0 (th_holds (@ let1 (a_var_bv 2 v0)(@ let2 (a_var_bv 2 v1)(and (= (BitVec 4)(concat 4 _ _ let1 let2 ) (concat 4 _ _ let2 let1 )) (not (= (BitVec 2)let1 let2))))))
(: (holds cln)
 ;; Preprocessing 
(th_let_pf _ (trust_f (@ let9 (a_var_bv 2 v1)(@ let10 (a_var_bv 2 v0)(and (= (BitVec 4)(concat 4 _ _ let9 let10 ) (concat 4 _ _ let10 let9 )) (not (= (BitVec 2)let9 let10)))))) (\ .PA219
(decl_atom (@ let17 (a_var_bv 2 v1)(@ let18 (a_var_bv 2 v0)(= (BitVec 4)(concat 4 _ _ let17 let18 ) (concat 4 _ _ let18 let17 )))) (\ .v2 (\ .a2
(decl_atom (= (BitVec 2)(a_var_bv 2 v1) (a_var_bv 2 v0)) (\ .v3 (\ .a3
(satlem _ _ (asf _ _ _ .a2 (\ .l4 (clausify_false (contra _ (and_elim_1 _ _ .PA219) .l4)))) (\ .pb4
(satlem _ _ (ast _ _ _ .a3 (\ .l7 (clausify_false (contra _ .l7 (and_elim_2 _ _ .PA219))))) (\ .pb5
 ;; Theory Lemmas 
;; BB atom mapping
(decl_bblast _ _ _ (bv_bbl_var 2 v0 _ )(\ bt205
(decl_bblast _ _ _ (bv_bbl_var 2 v1 _ )(\ bt206
(decl_bblast _ _ _ (bv_bbl_concat 4 _ _ _ _ _ _ _ bt205 bt206) (\ bt207
(decl_bblast _ _ _ (bv_bbl_concat 4 _ _ _ _ _ _ _ bt206 bt205)(\ bt209

(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt209 bt207)(\ bb.PA233
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt206 bt205)(\ bb.PA244
(decl_atom (@ let25 (a_var_bv 2 v1)
	   (@ let26 (a_var_bv 2 v0)
	   (= (BitVec 4) (concat 4 _ _ let25 let26 )
	      	      	 (concat 4 _ _ let26 let25 )))) (\ bb.v2 (\ bb.a2
(decl_atom (= (BitVec 2)(a_var_bv 2 v1) (a_var_bv 2 v0)) (\ bb.v12 (\ bb.a12
(decl_atom (iff (bitof v1 0) (bitof v0 0)) (\ bb.v9 (\ bb.a9
(decl_atom (iff (bitof v1 1) (bitof v0 1)) (\ bb.v10 (\ bb.a10
(decl_atom (@ let43 (a_var_bv 2 v0)
	   (@ let44 (bitof v0 0)
	   (@ let45 (a_var_bv 2 v1)
	   (@ let46 (bitof v1 0)
	   (@ let48 (bitof v0 1)
	   (@ let49 (bitof v1 1)
	   (and (iff let44 let46)
	   (and (iff let48 let49)
	   (and (iff let46 let44)
	   (iff let49 let48) ))))))))) (\ bb.v11 (\ bb.a11
(decl_atom (@ let54 (a_var_bv 2 v1)
	   (@ let56 (a_var_bv 2 v0)
	   (and (iff (bitof v1 0) (bitof v0 0))
	   	(iff (bitof v1 1) (bitof v0 1))))) (\ bb.v13 (\ bb.a13
;; Bit-blasting definitional clauses 
(satlem _ _ (asf _ _ _ bb.a9 (\ bb.l18
(ast _ _ _ bb.a11 (\ bb.l23 
(clausify_false (contra _ (and_elim_1 _ _ (and_elim_2 _ _ (and_elim_2 _ _ bb.l23))) bb.l18)))))) (\ bb.pb24
(satlem _ _ (asf _ _ _ bb.a10 (\ bb.l20 (ast _ _ _ bb.a11 (\ bb.l23 
(clausify_false (contra _ (and_elim_2 _ _ (and_elim_2 _ _ (and_elim_2 _ _ bb.l23))) bb.l20)))))) (\ bb.pb25
(satlem _ _ (asf _ _ _ bb.a11 (\ bb.l22
(ast _ _ _ bb.a2 (\ bb.l5 
(clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ bb.l5) (iff_elim_1 _ _ bb.PA233)) bb.l22)))))) (\ bb.pb27
(satlem _ _ (asf _ _ _ bb.a13 (\ bb.l26 (ast _ _ _ bb.a10 (\ bb.l21 (ast _ _ _ bb.a9 (\ bb.l19 
(clausify_false (contra _ bb.l21 (or_elim_1 _ _ (not_not_intro _ bb.l19) (not_and_elim _ _ bb.l26)))))))))) (\ bb.pb31
(satlem _ _ (asf _ _ _ bb.a12 (\ bb.l24 (ast _ _ _ bb.a13 (\ bb.l27 
(clausify_false (contra _ (or_elim_1 _ _ bb.l24 (iff_elim_2 _ _ bb.PA244)) (not_not_intro _ bb.l27))))))) (\ bb.pb33
;; Bit-blasting learned clauses 
(satlem _ _ (asf _ _ _ .a3 (\ .l6 (ast _ _ _ .a2 (\ .l5 (intro_assump_f _ _ _ .l6 bb.a12(\unit12
(intro_assump_t _ _ _ .l5 bb.a2(\unit2
(satlem_simplify _ _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ bb.pb33 bb.pb31 bb.v13)bb.pb25 bb.v10)bb.pb24 bb.v9)bb.pb27 bb.v11)(\bb.cl34
(satlem_simplify _ _ _ (R _ _ (Q _ _ bb.cl34 unit2 bb.v2)unit12 bb.v12)(\ e e)
)))))))))))( \ .lemc35
(satlem_simplify _ _ _ (Q _ _ (R _ _ .lemc35 .pb5 .v3).pb4 .v2)(\empty empty))))))))))))))))
))
))
))
)))))))))))))))))))))))))))))))))))))))
;;
