id     = "DATATYPES"
name   = "Datatypes theory"
header = "options/datatypes_options.h"

[[option]]
  name       = "dtRewriteErrorSel"
  smt_name   = ""
  category   = "expert"
  short      = ""
  long       = "dt-rewrite-error-sel"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "rewrite incorrectly applied selectors to arbitrary ground term"

[[option]]
  name       = "dtForceAssignment"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "dt-force-assignment"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "force the datatypes solver to give specific values to all datatypes terms before answering sat"

[[option]]
  name       = "dtBinarySplit"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "dt-binary-split"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "do binary splits for datatype constructor types"

[[option]]
  name       = "dtRefIntro"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "dt-ref-sk-intro"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "introduce reference skolems for shorter explanations"

[[option]]
  name       = "dtUseTesters"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "dt-use-testers"
  type       = "bool"
  default    = "true"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "do not preprocess away tester predicates"

[[option]]
  name       = "cdtBisimilar"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "cdt-bisimilar"
  type       = "bool"
  default    = "true"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "do bisimilarity check for co-datatypes"

[[option]]
  name       = "dtCyclic"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "dt-cyclic"
  type       = "bool"
  default    = "true"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "do cyclicity check for datatypes"

[[option]]
  name       = "dtInferAsLemmas"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "dt-infer-as-lemmas"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "always send lemmas out instead of making internal inferences"

[[option]]
  name       = "dtBlastSplits"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "dt-blast-splits"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "when applicable, blast splitting lemmas for all variables at once"

[[option]]
  name       = "dtSharedSelectors"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "dt-share-sel"
  type       = "bool"
  default    = "true"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "internally use shared selectors across multiple constructors"

[[option]]
  name       = "sygusSymBreak"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "sygus-sym-break"
  type       = "bool"
  default    = "true"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "simple sygus sym break lemmas"

[[option]]
  name       = "sygusSymBreakDynamic"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "sygus-sym-break-dynamic"
  type       = "bool"
  default    = "true"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "dynamic sygus sym break lemmas"

[[option]]
  name       = "sygusOpt1"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "sygus-opt1"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "sygus experimental option"

[[option]]
  name       = "sygusSymBreakLazy"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "sygus-sym-break-lazy"
  type       = "bool"
  default    = "true"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "lazily add symmetry breaking lemmas for terms"

[[option]]
  name       = "sygusSymBreakRlv"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "sygus-sym-break-rlv"
  type       = "bool"
  default    = "true"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "add relevancy conditions to symmetry breaking lemmas"

[[option]]
  name       = "sygusFair"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "sygus-fair=MODE"
  type       = "CVC4::theory::SygusFairMode"
  default    = "CVC4::theory::SYGUS_FAIR_DT_SIZE"
  handler    = "stringToSygusFairMode"
  predicates = []
  includes   = ["options/datatypes_modes.h"]
  notifies   = []
  links      = []
  read_only  = true
  help       = "if and how to apply fairness for sygus"

[[option]]
  name       = "sygusFairMax"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "sygus-fair-max"
  type       = "bool"
  default    = "true"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "use max instead of sum for multi-function sygus conjectures"

[[option]]
  name       = "sygusAbortSize"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "sygus-abort-size=N"
  type       = "int"
  default    = "-1"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "tells enumerative sygus to only consider solutions up to term size N (-1 == no limit, default)"
