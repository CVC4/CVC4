id     = "ARITH"
name   = "Arithmetic theory"
header = "options/arith_options.h"

[[option]]
  name       = "arithUnateLemmaMode"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "unate-lemmas=MODE"
  type       = "ArithUnateLemmaMode"
  default    = "ALL_PRESOLVE_LEMMAS"
  handler    = "stringToArithUnateLemmaMode"
  predicates = []
  includes   = ["options/arith_unate_lemma_mode.h"]
  notifies   = []
  links      = []
  read_only  = true
  help       = "determines which lemmas to add before solving (default is 'all', see --unate-lemmas=help)"

[[option]]
  name       = "arithPropagationMode"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "arith-prop=MODE"
  type       = "ArithPropagationMode"
  default    = "BOTH_PROP"
  handler    = "stringToArithPropagationMode"
  predicates = []
  includes   = ["options/arith_propagation_mode.h"]
  notifies   = []
  links      = []
  read_only  = true
  help       = "turns on arithmetic propagation (default is 'old', see --arith-prop=help)"

[[option]]
  name       = "arithHeuristicPivots"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "heuristic-pivots=N"
  type       = "int16_t"
  default    = "0"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "the number of times to apply the heuristic pivot rule; if N < 0, this defaults to the number of variables; if this is unset, this is tuned by the logic selection"

[[option]]
  name       = "arithStandardCheckVarOrderPivots"
  smt_name   = ""
  category   = "expert"
  short      = ""
  long       = "standard-effort-variable-order-pivots=N"
  type       = "int16_t"
  default    = "-1"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "limits the number of pivots in a single invocation of check() at a non-full effort level using Bland's pivot rule"

[[option]]
  name       = "arithErrorSelectionRule"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "error-selection-rule=RULE"
  type       = "ErrorSelectionRule"
  default    = "MINIMUM_AMOUNT"
  handler    = "stringToErrorSelectionRule"
  predicates = []
  includes   = ["options/arith_heuristic_pivot_rule.h"]
  notifies   = []
  links      = []
  read_only  = true
  help       = "change the pivot rule for the basic variable (default is 'min', see --pivot-rule help)"

[[option]]
  name       = "arithSimplexCheckPeriod"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "simplex-check-period=N"
  type       = "uint16_t"
  default    = "200"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "the number of pivots to do in simplex before rechecking for a conflict on all variables"

[[option]]
  name       = "arithPivotThreshold"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "pivot-threshold=N"
  type       = "uint16_t"
  default    = "2"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "sets the number of pivots using --pivot-rule per basic variable per simplex instance before using variable order"

[[option]]
  name       = "arithPropagateMaxLength"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "prop-row-length=N"
  type       = "uint16_t"
  default    = "16"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "sets the maximum row length to be used in propagation"

[[option]]
  name       = "arithDioSolver"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "dio-solver"
  type       = "bool"
  default    = "true"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "turns on Linear Diophantine Equation solver (Griggio, JSAT 2012)"

[[option]]
  name       = "arithRewriteEq"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "arith-rewrite-equalities"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "turns on the preprocessing rewrite turning equalities into a conjunction of inequalities"

[[option]]
  name       = "arithMLTrick"
  smt_name   = "miplib-trick"
  category   = "regular"
  short      = ""
  long       = "miplib-trick"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "turns on the preprocessing step of attempting to infer bounds on miplib problems"

[[option]]
  name       = "arithMLTrickSubstitutions"
  smt_name   = "miplib-trick-subs"
  category   = "regular"
  short      = ""
  long       = "miplib-trick-subs=N"
  type       = "unsigned"
  default    = "1"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "do substitution for miplib 'tmp' vars if defined in <= N eliminated vars"

[[option]]
  name       = "doCutAllBounded"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "cut-all-bounded"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "turns on the integer solving step of periodically cutting all integer variables that have both upper and lower bounds"

[[option]]
  name       = "maxCutsInContext"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "maxCutsInContext"
  type       = "unsigned"
  default    = "65535"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "maximum cuts in a given context before signalling a restart"

[[option]]
  name       = "revertArithModels"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "revert-arith-models-on-unsat"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "revert the arithmetic model to a known safe model on unsat if one is cached"

[[option]]
  name       = "havePenalties"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "fc-penalties"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "turns on degenerate pivot penalties"

[[option]]
  name       = "useFC"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "use-fcsimplex"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "use focusing and converging simplex (FMCAD 2013 submission)"

[[option]]
  name       = "useSOI"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "use-soi"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "use sum of infeasibility simplex (FMCAD 2013 submission)"

[[option]]
  name       = "restrictedPivots"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "restrict-pivots"
  type       = "bool"
  default    = "true"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "have a pivot cap for simplex at effort levels below fullEffort"

[[option]]
  name       = "collectPivots"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "collect-pivot-stats"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "collect the pivot history"

[[option]]
  name       = "useApprox"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "use-approx"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "attempt to use an approximate solver"

[[option]]
  name       = "maxApproxDepth"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "approx-branch-depth"
  type       = "int16_t"
  default    = "200"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "maximum branch depth the approximate solver is allowed to take"

[[option]]
  name       = "exportDioDecompositions"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "dio-decomps"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "let skolem variables for integer divisibility constraints leak from the dio solver"

[[option]]
  name       = "newProp"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "new-prop"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "use the new row propagation system"

[[option]]
  name       = "arithPropAsLemmaLength"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "arith-prop-clauses"
  type       = "uint16_t"
  default    = "8"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "rows shorter than this are propagated as clauses"

[[option]]
  name       = "soiQuickExplain"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "soi-qe"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "use quick explain to minimize the sum of infeasibility conflicts"

[[option]]
  name       = "rewriteDivk"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "rewrite-divk"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "rewrite division and mod when by a constant into linear terms"

[[option]]
  name       = "trySolveIntStandardEffort"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "se-solve-int"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "attempt to use the approximate solve integer method on standard effort"

[[option]]
  name       = "replayFailureLemma"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "lemmas-on-replay-failure"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "attempt to use external lemmas if approximate solve integer failed"

[[option]]
  name       = "dioSolverTurns"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "dio-turns"
  type       = "int"
  default    = "10"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "turns in a row dio solver cutting gets"

[[option]]
  name       = "rrTurns"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "rr-turns"
  type       = "int"
  default    = "3"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "round robin turn"

[[option]]
  name       = "dioRepeat"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "dio-repeat"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "handle dio solver constraints in mass or one at a time"

[[option]]
  name       = "replayEarlyCloseDepths"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "replay-early-close-depth"
  type       = "int"
  default    = "1"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "multiples of the depths to try to close the approx log eagerly"

[[option]]
  name       = "replayFailurePenalty"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "replay-failure-penalty"
  type       = "int"
  default    = "100"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "number of solve integer attempts to skips after a numeric failure"

[[option]]
  name       = "replayNumericFailurePenalty"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "replay-num-err-penalty"
  type       = "int"
  default    = "4194304"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "number of solve integer attempts to skips after a numeric failure"

[[option]]
  name       = "replayRejectCutSize"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "replay-reject-cut"
  type       = "unsigned"
  default    = "25500"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "maximum complexity of any coefficient while replaying cuts"

[[option]]
  name       = "lemmaRejectCutSize"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "replay-lemma-reject-cut"
  type       = "unsigned"
  default    = "25500"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "maximum complexity of any coefficient while outputting replaying cut lemmas"

[[option]]
  name       = "soiApproxMajorFailure"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "replay-soi-major-threshold"
  type       = "double"
  default    = ".01"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "threshold for a major tolerance failure by the approximate solver"

[[option]]
  name       = "soiApproxMajorFailurePen"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "replay-soi-major-threshold-pen"
  type       = "int"
  default    = "50"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "threshold for a major tolerance failure by the approximate solver"

[[option]]
  name       = "soiApproxMinorFailure"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "replay-soi-minor-threshold"
  type       = "double"
  default    = ".0001"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "threshold for a minor tolerance failure by the approximate solver"

[[option]]
  name       = "soiApproxMinorFailurePen"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "replay-soi-minor-threshold-pen"
  type       = "int"
  default    = "10"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "threshold for a minor tolerance failure by the approximate solver"

[[option]]
  name       = "ppAssertMaxSubSize"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "pp-assert-max-sub-size"
  type       = "unsigned"
  default    = "2"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "threshold for substituting an equality in ppAssert"

[[option]]
  name       = "maxReplayTree"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "max-replay-tree"
  type       = "int"
  default    = "512"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "threshold for attempting to replay a tree"

[[option]]
  name       = "pbRewrites"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "pb-rewrites"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "apply pseudo boolean rewrites"

[[option]]
  name       = "pbRewriteThreshold"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "pb-rewrite-threshold"
  type       = "int"
  default    = "256"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "threshold of number of pseudoboolean variables to have before doing rewrites"

[[option]]
  name       = "sNormInferEq"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "snorm-infer-eq"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "infer equalities based on Shostak normalization"

[[option]]
  name       = "nlExt"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "nl-ext"
  type       = "bool"
  default    = "true"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "extended approach to non-linear"

[[option]]
  name       = "nlExtResBound"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "nl-ext-rbound"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "use resolution-style inference for inferring new bounds"

[[option]]
  name       = "nlExtFactor"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "nl-ext-factor"
  type       = "bool"
  default    = "true"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "use factoring inference in non-linear solver"

[[option]]
  name       = "nlExtTangentPlanes"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "nl-ext-tplanes"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "use non-terminating tangent plane strategy for non-linear"

[[option]]
  name       = "nlExtTfTangentPlanes"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "nl-ext-tf-tplanes"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "use non-terminating tangent plane strategy for transcendental functions for non-linear"

[[option]]
  name       = "nlExtEntailConflicts"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "nl-ext-ent-conf"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "check for entailed conflicts in non-linear solver"

[[option]]
  name       = "nlExtRewrites"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "nl-ext-rewrite"
  type       = "bool"
  default    = "true"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "do rewrites in non-linear solver"

[[option]]
  name       = "nlExtSolveSubs"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "nl-ext-solve-subs"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "do solving for determining constant substitutions"

[[option]]
  name       = "nlExtPurify"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "nl-ext-purify"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "purify non-linear terms at preprocess"

[[option]]
  name       = "nlExtSplitZero"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "nl-ext-split-zero"
  type       = "bool"
  default    = "false"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "intial splits on zero for all variables"

[[option]]
  name       = "nlExtTfTaylorDegree"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "nl-ext-tf-taylor-deg=N"
  type       = "int16_t"
  default    = "4"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = false
  help       = "initial degree of polynomials for Taylor approximation"

[[option]]
  name       = "nlExtTfIncPrecision"
  smt_name   = ""
  category   = "regular"
  short      = ""
  long       = "nl-ext-tf-inc-prec"
  type       = "bool"
  default    = "true"
  handler    = ""
  predicates = []
  includes   = []
  notifies   = []
  links      = []
  read_only  = true
  help       = "whether to increment the precision for transcendental function constraints"
