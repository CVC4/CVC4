/*********************                                                        */
/*! \file query_generator.h
 ** \verbatim
 ** Top contributors (to current version):
 **   Andrew Reynolds
 ** This file is part of the CVC4 project.
 ** Copyright (c) 2009-2018 by the authors listed in the file AUTHORS
 ** in the top-level source directory) and their institutional affiliations.
 ** All rights reserved.  See the file COPYING in the top-level source
 ** directory for licensing information.\endverbatim
 **
 ** \brief query_generator
 **/

#include "cvc4_private.h"

#ifndef __CVC4__THEORY__QUANTIFIERS__QUERY_GENERATOR_H
#define __CVC4__THEORY__QUANTIFIERS__QUERY_GENERATOR_H

#include <map>
#include "expr/node.h"
#include "theory/quantifiers/expr_miner.h"
#include "theory/quantifiers/lazy_trie.h"
#include "theory/quantifiers/sygus_sampler.h"

namespace CVC4 {
namespace theory {
namespace quantifiers {

/** QueryGenerator
 *
 */
class QueryGenerator : public ExprMiner
{
 public:
  QueryGenerator();
  ~QueryGenerator() {}
  /** initialize */
  void initialize( const std::vector< Node >& vars, SygusSampler * ss = nullptr ) override;
  /** add term */
  bool addTerm(Node n, std::ostream& out) override;

  /** set threshold */
  void setThreshold(unsigned deqThresh);
 private:
  /** cache of all terms registered to this generator */
  std::unordered_set< Node, NodeHashFunction > d_terms;
  /** the disequality threshold (number of points)
   *
   */
  unsigned d_deq_thresh;
  /** the trie, for each type */
  std::map<TypeNode, LazyTrie> d_qgt_trie;
  /** total number of queries generated by this class */
  unsigned d_query_count;
  /** find queries
   *
   */
  void findQueries(LazyTrie* lt,
                   Node n,
                   std::vector<Node>& queries,
                   std::vector<std::vector<unsigned>>& queriesPtTrue);
  /** queries for points */
  std::map<unsigned, std::vector<Node> > d_pt_to_queries;
  /** queries to points */
  std::map< Node, std::vector< unsigned > > d_qys_to_points;
  /** check query qy, which is satisfied by sample point spIndex */
  void checkQuery(Node qy, unsigned spIndex);
};

}  // namespace quantifiers
}  // namespace theory
}  // namespace CVC4

#endif /* __CVC4__THEORY__QUANTIFIERS___H */
