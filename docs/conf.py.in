# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#

import sys
# add path to enable extensions
sys.path.insert(0, '${CMAKE_CURRENT_SOURCE_DIR}/ext/')

# path to python api
sys.path.insert(0, '${CMAKE_BINARY_DIR}/src/api/python')

if("${BUILD_BINDINGS_PYTHON}" == "ON"):
        tags.add('bindings_python')
if("${BUILD_BINDINGS_JAVA}" == "ON"):
        tags.add('bindings_java')


# -- Project information -----------------------------------------------------

project = 'cvc5'
copyright = '2021, the authors of cvc5'
author = 'The authors of cvc5'


# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
        'breathe',
        'sphinx.ext.autodoc',
        'sphinx.ext.autosectionlabel',
        'sphinxcontrib.bibtex',
        'sphinx_tabs.tabs',
        'examples',
        'include_build_file',
]

bibtex_bibfiles = ['references.bib']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'
html_theme_options = {}
html_static_path = ['${CMAKE_CURRENT_SOURCE_DIR}/_static/']
html_css_files = ['custom.css']

# -- Breathe configuration ---------------------------------------------------
breathe_default_project = "cvc5"
breathe_domain_by_extension = {"h" : "cpp"}
cpp_index_common_prefix = ["cvc5::api::"]

# where to look for include-build-file
ibf_folders = ['${CMAKE_CURRENT_BINARY_DIR}']

# -- SMT-LIB syntax highlighting ---------------------------------------------
from pygments.lexer import RegexLexer
from pygments import token
from sphinx.highlighting import lexers

class SmtLibLexer(RegexLexer):
    name = 'smtlib'

    tokens = {
        'root': [
            (r'QF_BV', token.Text),
            (r'QF_UFDT', token.Text),
            (r'ALL_SUPPORTED', token.Text),
            (r'set-logic', token.Keyword),
            (r'set-option', token.Keyword),
            (r'declare-const', token.Keyword),
            (r'declare-datatypes', token.Keyword),
            (r'declare-fun', token.Keyword),
            (r'define-fun', token.Keyword),
            (r'assert\b', token.Keyword),
            (r'check-sat-assuming', token.Keyword),
            (r'check-sat', token.Keyword),
            (r'exit', token.Keyword),
            (r'get-model', token.Keyword),
            (r'get-unsat-assumptions', token.Keyword),
            (r'get-unsat-core', token.Keyword),
            (r'push', token.Keyword),
            (r'pop', token.Keyword),
            (r'as', token.Name.Attribute),
            (r':incremental', token.Name.Attribute),
            (r':named', token.Name.Attribute),
            (r':produce-models', token.Name.Attribute),
            (r':produce-unsat-cores', token.Name.Attribute),
            (r':produce-unsat-assumptions', token.Name.Attribute),
            (r'!', token.Name.Attribute),
            (r'BitVec', token.Name.Attribute),
            (r'RNE', token.Name.Attribute),
            (r'true', token.String),
            (r'distinct', token.Operator),
            (r'=', token.Operator),
            (r'>', token.Operator),
            (r'and', token.Operator),
            (r'bvadd', token.Operator),
            (r'bvashr', token.Operator),
            (r'bvmul', token.Operator),
            (r'bvugt', token.Operator),
            (r'bvult', token.Operator),
            (r'bvule', token.Operator),
            (r'bvsdiv', token.Operator),
            (r'extract', token.Operator),
            (r'fp.gt', token.Operator),
            (r'ite', token.Operator),
            (r'to_fp_unsigned', token.Operator),
            (r'\+zero', token.Operator),
            (r'#b[0-1]+', token.Text),
            (r'bv[0-9]+', token.Text),
            (r'".*?"', token.String),
            (r'[a-zA-Z][a-zA-Z0-9]*', token.Name),
            (r'[0-9]+', token.Number),
            (r'\s', token.Text),
            (r'\(_', token.Text),
            (r'\(', token.Text),
            (r'\)', token.Text),
            (r';.*$', token.Comment),
            (r'\.\.\.', token.Text)
        ]
    }

lexers['smtlib'] = SmtLibLexer()
