; Depends on er.plf

; Type for representing success when testing a side-condition
(declare TestSuccess type)

; Test for clause_add_suffix_all
(declare test_clause_add_suffix_all
         (! list clause
            (! suffix clause
               (! result cnf
                  (! (^ (clause_add_suffix_all list suffix) result)
                     TestSuccess)))))

(check
  (% a lit
  (% b lit
  (% c lit
     (test_clause_add_suffix_all
       (clc a (clc b cln))
       (clc c cln)
       (cnfc (clc a (clc c cln))
        (cnfc (clc b (clc c cln))
        cnfn))
     )
  )))
)

; This is a test of ER proof produced by drat2er on Example 1 from:
; https://www.cs.utexas.edu/~marijn/drat-trim/
;
; Unfortunately, it doesn't do a very complicated definition.
; I've been unable to get drat2er to produce complex definitions on any small
; inputs so far.
(check
  (% v1 var
  (% v2 var
  (% v3 var
  (% v4 var
    (% pf_c1 (holds (clc (pos v1) (clc (pos v2) (clc (neg v3) cln))))
    (% pf_c2 (holds (clc (neg v1) (clc (neg v2) (clc (pos v3) cln))))
    (% pf_c3 (holds (clc (pos v2) (clc (pos v3) (clc (neg v4) cln))))
    (% pf_c4 (holds (clc (neg v2) (clc (neg v3) (clc (pos v4) cln))))
    (% pf_c5 (holds (clc (neg v1) (clc (neg v3) (clc (neg v4) cln))))
    (% pf_c6 (holds (clc (pos v1) (clc (pos v3) (clc (pos v4) cln))))
    (% pf_c7 (holds (clc (neg v1) (clc (pos v2) (clc (pos v4) cln))))
    (% pf_c8 (holds (clc (pos v1) (clc (neg v2) (clc (neg v4) cln))))
       (: (holds cln)
          (decl_rat_elimination_def
            (neg v1)
            cln
            (\ v5
            (\ def1
              (clausify_rat_elimination_def _ _ _ def1 _ _
                (\ pf_c9 ; type: (holds (clc (pos def1v) cln))
                (\ pf_c10 ; type: (holds (clc (pos def1v) (clc (pos v1) cln)))
                (\ idc0 ; type: (cnf_holds cnfn)
                  (satlem_simplify _ _ _ (R _ _ pf_c10 pf_c7 v1) (\ pf_c11
                  (satlem_simplify _ _ _ (R _ _ pf_c10 pf_c5 v1) (\ pf_c12
                  (satlem_simplify _ _ _ (R _ _ pf_c10 pf_c2 v1) (\ pf_c13
                  (satlem_simplify _ _ _ (Q _ _ (R _ _ pf_c2 pf_c5 v3) pf_c8 v1) (\ pf_c14
                  (satlem_simplify _ _ _ (Q _ _ (R _ _ pf_c7 pf_c2 v2) pf_c6 v1) (\ pf_c15
                  (satlem_simplify _ _ _ (Q _ _ (R _ _ pf_c7 pf_c5 v4) pf_c1 v1) (\ pf_c16
                  (satlem_simplify _ _ _ (R _ _ (Q _ _ pf_c3 pf_c15 v4) pf_c16 v3) (\ pf_c17
                  (satlem_simplify _ _ _ (Q _ _ (R _ _ (Q _ _ pf_c4 pf_c15 v3) pf_c14 v4) pf_c17 v2) (\ pf_c18
                    pf_c18
                  ))))))))))))))))
                )))
              )
            ))
          )
       )
    ))))))))
  ))))
)
